{"version":3,"file":"unit-test.umd.js","sources":["../hello_world.ts","../unit-test.ts"],"sourcesContent":["// MIT License\n\n// Copyright (c) 2019 Erin Catto\n\n// Permission is hereby granted, free of charge, to any person obtaining a copy\n// of this software and associated documentation files (the \"Software\"), to deal\n// in the Software without restriction, including without limitation the rights\n// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n// copies of the Software, and to permit persons to whom the Software is\n// furnished to do so, subject to the following conditions:\n\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\n// SOFTWARE.\n\nfunction CHECK(c: any, msg?: string): asserts c { if (!c) { throw new Error(msg); } }\n\nimport * as b2 from \"@box2d\";\n\n// This is a simple example of building and running a simulation\n// using Box2D. Here we create a large ground box and a small dynamic\n// box.\n// There are no graphics for this example. Box2D is meant to be used\n// with your rendering engine in your game engine.\nexport function main(): number {\n  // Define the gravity vector.\n  const gravity: b2.Vec2 = new b2.Vec2(0, -10);\n\n  // Construct a world object, which will hold and simulate the rigid bodies.\n  const world: b2.World = new b2.World(gravity);\n\n  // Define the ground body.\n  const groundBodyDef: b2.BodyDef = new b2.BodyDef();\n  groundBodyDef.position.Set(0, -10);\n\n  // Call the body factory which allocates memory for the ground body\n  // from a pool and creates the ground box shape (also from a pool).\n  // The body is also added to the world.\n  const groundBody: b2.Body = world.CreateBody(groundBodyDef);\n\n  // Define the ground box shape.\n  const groundBox: b2.PolygonShape = new b2.PolygonShape();\n\n  // The extents are the half-widths of the box.\n  groundBox.SetAsBox(50, 10);\n\n  // Add the ground fixture to the ground body.\n  groundBody.CreateFixture(groundBox, 0);\n\n  // Define the dynamic body. We set its position and call the body factory.\n  const bodyDef: b2.BodyDef = new b2.BodyDef();\n  bodyDef.type = b2.BodyType.b2_dynamicBody;\n  bodyDef.position.Set(0, 4);\n  const body: b2.Body = world.CreateBody(bodyDef);\n\n  // Define another box shape for our dynamic body.\n  const dynamicBox: b2.PolygonShape = new b2.PolygonShape();\n  dynamicBox.SetAsBox(1, 1);\n\n  // Define the dynamic body fixture.\n  const fixtureDef: b2.FixtureDef = new b2.FixtureDef();\n  fixtureDef.shape = dynamicBox;\n\n  // Set the box density to be non-zero, so it will be dynamic.\n  fixtureDef.density = 1;\n\n  // Override the default friction.\n  fixtureDef.friction = 0.3;\n\n  // Add the shape to the body.\n  const fixture: b2.Fixture = body.CreateFixture(fixtureDef);\n\n  // Prepare for simulation. Typically we use a time step of 1/60 of a\n  // second (60Hz) and 10 iterations. This provides a high quality simulation\n  // in most game scenarios.\n  const timeStep: number = 1 / 60;\n  const velocityIterations: number = 6;\n  const positionIterations: number = 2;\n\n  let position: b2.Vec2 = body.GetPosition();\n  let angle: number = body.GetAngle();\n\n  // This is our little game loop.\n  for (let i: number = 0; i < 60; ++i) {\n    // Instruct the world to perform a single step of simulation.\n    // It is generally best to keep the time step and iterations fixed.\n    world.Step(timeStep, velocityIterations, positionIterations);\n\n    // Now print the position and angle of the body.\n    position = body.GetPosition();\n    angle = body.GetAngle();\n\n    console.log(position.x.toFixed(2), position.y.toFixed(2), angle.toFixed(2));\n  }\n\n  // When the world destructor is called, all bodies and joints are freed. This can\n  // create orphaned pointers, so be careful about your world management.\n\n  body.DestroyFixture(fixture);\n\n  world.DestroyBody(body);\n\n  CHECK(b2.Abs(position.x) < 0.01);\n  CHECK(b2.Abs(position.y - 1.01) < 0.01);\n  CHECK(b2.Abs(angle) < 0.01);\n\n  return 0;\n}\n","import * as hello_world from \"./hello_world.js\";\n\nexport function main(): number {\n    return hello_world.main();\n}\n"],"names":["main","b2","hello_world.main"],"mappings":"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"}